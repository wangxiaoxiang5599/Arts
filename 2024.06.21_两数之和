1.Algorithm 两数之和

给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]


function twoSum(nums, target) {
  let map = new Map(); // 创建一个Map对象来存储已经遍历过的数字及其索引
  for (let i = 0; i < nums.length; i++) {
    let complement = target - nums[i]; // 计算当前元素的补数
    if (map.has(complement)) {
      // 如果补数在Map中存在，返回这两个数的索引
      return [map.get(complement), i];
    }
    map.set(nums[i], i); // 否则，将当前元素及其索引存入Map
  }
  return []; // 如果没有找到，返回空数组
}

tips: 此处题目用了下forEach方法，发现return方法只是跳出循环
